{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nfunction RefrshHandler({\n  setIsAuthenticated,\n  setRole\n}) {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const role = localStorage.getItem('role');\n    const supplierProduct = localStorage.getItem('supplierProduct');\n    if (token && role && supplierProduct) {\n      var _allowedPaths$role;\n      setIsAuthenticated(true);\n      setRole(role);\n      setSupplierProduct(supplierProduct);\n\n      // تعريف المسارات المسموحة لكل دور\n      const allowedPaths = {\n        supplier: ['/supplier/home'],\n        company: ['/company/home'],\n        admin: ['/admin/home']\n      };\n\n      // إذا لم يكن المسار الحالي من المسارات المسموحة للدور، يتم إعادة توجيه المستخدم إلى المسار المناسب\n      if (!((_allowedPaths$role = allowedPaths[role]) !== null && _allowedPaths$role !== void 0 && _allowedPaths$role.includes(location.pathname))) {\n        navigate(`/${role}/home`, {\n          replace: true\n        }); // إعادة التوجيه إلى الصفحة الرئيسية الخاصة بالدور\n      }\n      //  عندما تريد استبدال الصفحة الحالية وعدم السماح بالعودة إليها replace: true استخدم.\n      // عندما تريد إضافة الصفحة الجديدة إلى السجل وتمكين العودة للصفحة السابق replace: false استخدم \n    } else {\n      setIsAuthenticated(false);\n      setRole(null);\n\n      // إذا لم يتم تسجيل الدخول، نقوم بتوجيه المستخدم إلى صفحة تسجيل الدخول\n      if (!['/supplier-login', '/company-login', '/admin', '/supplier-registration', '/company-registration'].includes(location.pathname)) {\n        navigate('/supplier-login', {\n          replace: false\n        }); // تحويل المستخدم إلى صفحة تسجيل الدخول الخاصة بـ supplier\n      }\n    }\n  }, [location, navigate, setIsAuthenticated, setRole]);\n  return null; // هذا المكون لا يعرض شيئًا\n}\n_s(RefrshHandler, \"fPjCxODVr6jVvib6o2c9VLE4s84=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = RefrshHandler;\nexport default RefrshHandler;\nvar _c;\n$RefreshReg$(_c, \"RefrshHandler\");","map":{"version":3,"names":["useEffect","useLocation","useNavigate","RefrshHandler","setIsAuthenticated","setRole","_s","location","navigate","token","localStorage","getItem","role","supplierProduct","_allowedPaths$role","setSupplierProduct","allowedPaths","supplier","company","admin","includes","pathname","replace","_c","$RefreshReg$"],"sources":["D:/A.L/مواد جامعة/Project/Project(A)/Code/login-admin/frontend/src/routes/RefrshHandler.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nfunction RefrshHandler({ setIsAuthenticated, setRole }) {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const role = localStorage.getItem('role');\r\n    const supplierProduct = localStorage.getItem('supplierProduct');\r\n\r\n    if (token && role && supplierProduct) {\r\n      setIsAuthenticated(true);\r\n      setRole(role);\r\n      setSupplierProduct(supplierProduct);\r\n\r\n\r\n      // تعريف المسارات المسموحة لكل دور\r\n      const allowedPaths = {\r\n        supplier: ['/supplier/home'],\r\n        company: ['/company/home'],\r\n        admin: ['/admin/home'],\r\n      };\r\n\r\n      // إذا لم يكن المسار الحالي من المسارات المسموحة للدور، يتم إعادة توجيه المستخدم إلى المسار المناسب\r\n      if (!allowedPaths[role]?.includes(location.pathname)) {\r\n        navigate(`/${role}/home`, { replace: true }); // إعادة التوجيه إلى الصفحة الرئيسية الخاصة بالدور\r\n      }\r\n      //  عندما تريد استبدال الصفحة الحالية وعدم السماح بالعودة إليها replace: true استخدم.\r\n      // عندما تريد إضافة الصفحة الجديدة إلى السجل وتمكين العودة للصفحة السابق replace: false استخدم \r\n    } else {\r\n      setIsAuthenticated(false);\r\n      setRole(null);\r\n\r\n      // إذا لم يتم تسجيل الدخول، نقوم بتوجيه المستخدم إلى صفحة تسجيل الدخول\r\n      if (!['/supplier-login', '/company-login', '/admin', '/supplier-registration', '/company-registration'].includes(location.pathname)) {\r\n        navigate('/supplier-login', { replace: false }); // تحويل المستخدم إلى صفحة تسجيل الدخول الخاصة بـ supplier\r\n      }\r\n    }\r\n  }, [location, navigate, setIsAuthenticated, setRole]);\r\n\r\n  return null; // هذا المكون لا يعرض شيئًا\r\n}\r\n\r\nexport default RefrshHandler;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,SAASC,aAAaA,CAAC;EAAEC,kBAAkB;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACtD,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,MAAME,eAAe,GAAGH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAE/D,IAAIF,KAAK,IAAIG,IAAI,IAAIC,eAAe,EAAE;MAAA,IAAAC,kBAAA;MACpCV,kBAAkB,CAAC,IAAI,CAAC;MACxBC,OAAO,CAACO,IAAI,CAAC;MACbG,kBAAkB,CAACF,eAAe,CAAC;;MAGnC;MACA,MAAMG,YAAY,GAAG;QACnBC,QAAQ,EAAE,CAAC,gBAAgB,CAAC;QAC5BC,OAAO,EAAE,CAAC,eAAe,CAAC;QAC1BC,KAAK,EAAE,CAAC,aAAa;MACvB,CAAC;;MAED;MACA,IAAI,GAAAL,kBAAA,GAACE,YAAY,CAACJ,IAAI,CAAC,cAAAE,kBAAA,eAAlBA,kBAAA,CAAoBM,QAAQ,CAACb,QAAQ,CAACc,QAAQ,CAAC,GAAE;QACpDb,QAAQ,CAAC,IAAII,IAAI,OAAO,EAAE;UAAEU,OAAO,EAAE;QAAK,CAAC,CAAC,CAAC,CAAC;MAChD;MACA;MACA;IACF,CAAC,MAAM;MACLlB,kBAAkB,CAAC,KAAK,CAAC;MACzBC,OAAO,CAAC,IAAI,CAAC;;MAEb;MACA,IAAI,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,QAAQ,EAAE,wBAAwB,EAAE,uBAAuB,CAAC,CAACe,QAAQ,CAACb,QAAQ,CAACc,QAAQ,CAAC,EAAE;QACnIb,QAAQ,CAAC,iBAAiB,EAAE;UAAEc,OAAO,EAAE;QAAM,CAAC,CAAC,CAAC,CAAC;MACnD;IACF;EACF,CAAC,EAAE,CAACf,QAAQ,EAAEC,QAAQ,EAAEJ,kBAAkB,EAAEC,OAAO,CAAC,CAAC;EAErD,OAAO,IAAI,CAAC,CAAC;AACf;AAACC,EAAA,CAxCQH,aAAa;EAAA,QACHF,WAAW,EACXC,WAAW;AAAA;AAAAqB,EAAA,GAFrBpB,aAAa;AA0CtB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}